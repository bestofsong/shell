#!/usr/bin/env bash
set -e

is_verbose=false
is_edit=false
pass_args=()
while [ "$#" -gt 0 ] ; do
  key="$1"
  case $key in
      --verbose)
      is_verbose=true
      shift
      ;;
      --edit)
      is_edit=true
      shift
      ;;
      *)
      pass_args+=("$key")
      shift
      ;;
  esac
done

# pass_args 参数直接relay给cat

# 优先使用gsed
used_sed() {
  if type gsed >/dev/null 2>&1 ; then
    gsed "$@"
  else
    sed "$@"
  fi
}

# 注意事项：
# back reference从2开始，因为为了添加颜色在输入的re外面已经添加一层()

history_file=.colorcat.hist
if [ -n "$SHELLPACK_HOME" ] ; then
  history_file="${SHELLPACK_HOME}/$history_file"
fi

if $is_edit ; then
  vim -f "$history_file"
  exit
fi

# entry history文件格式
# 1. entry
# ============
# color: red|green
# re: xxx
# re: xxx
# color: blue
# re: yyy
# ------------
# 2. entry之间的分隔符
# 
# ============

declare -A color_map
color_map[black]='[30m'
color_map[red]='[31m'
color_map[green]='[32m'
color_map[yellow]='[33m'
color_map[blue]='[34m'
color_map[magenta]='[35m'
color_map[cyan]='[36m'
color_map[white]='[37m'
color_reset_code='[0m'

load_history() {
  if [ -r "$history_file" ] ; then
    cat "$history_file"
  fi
}

# 删除行首、行末空白符
# 删除空行
trim_entry() {
  sed 's/^[[:space:]]\{1,\}//' | sed 's/^[[:space:]]\{1,\}$//' | sed '/^[[:space:]]*#/ d' | sed '/^$/ d'
}

# 这个函数需要在pipe环境下，通过终端和用户交互，获取后面操作需要的选项
edit_new_entry() {
  local tmp_file
  tmp_file=$(mktemp)
  >"$tmp_file" echo -e "#Format:\n#color: <red|green|blue|black|yellow|magenta|cyan|white>\n#re: ^re1\n#re: ^re2\$"

  local ttyname
  ttyname=/dev/$(ps -p "$$" -o tty | sed -n '$p' | sed 's/[[:space:]]\{1,\}$//')
  # 下面一行为什么也能工作（没重定向stdin）？
  # 说明vim始终把控制终端作为stdin，而不是盲目使用继承自父进程的stdin？
  # >"$ttyname" vim -f "$tmp_file"
  0<"$ttyname" 1>"$ttyname" vim -f "$tmp_file"
  <"$tmp_file" trim_entry
  rm "$tmp_file"
}

edit_entry='Or, edit new entry'
no_color='Or, no extra color'

is_new_entry=false
is_no_color=false
loaded_history=$(load_history)
selected_entry=
if [ -n "$loaded_history" ] ; then
  declare -a entries
  {
    while read -r -d '' line ; do
      if [ -z "$line" ] ; then
        continue
      fi
      entries+=("$line")
    done
  } <<<"$loaded_history"

  if [ "${#entries[@]}" -gt 0 ] ; then
    1>&2 echo "Total number of history entries: ${#entries[@]}"$'\n'"Choose one:"
    entries+=("$edit_entry")
    entries+=("$no_color")
    ttyname=/dev/$(ps -p "$$" -o tty | sed -n '$p' | sed 's/[[:space:]]\{1,\}$//')
    declare -a displayed_entries=()
    for item in "${entries[@]}" ; do
      displayed_item=$(printf '%s' "$item" | sed -e ':a' -e '$!N;s/\n/\//;ta')
      displayed_entries+=("$displayed_item")
    done
    {
      select choice in "${displayed_entries[@]}" ; do
        if [ -z "$choice" ] ; then
          continue
        fi
        selected_index=$(echo "$REPLY" | sed 's/[[:space:]]//g')
        choice="${entries[selected_index-1]}"
        if [ "$choice" = "$edit_entry" ] ; then
          selected_entry=$(edit_new_entry)
          is_new_entry=true
        elif [ "$choice" = "$no_color" ] ; then
          selected_entry=''
          is_no_color=true
        else
          selected_entry="$choice"
        fi
        break
      done
    } 1>&2 <"${ttyname}"
  else
    selected_entry=$(edit_new_entry)
    is_new_entry=true
  fi
fi

if [ -z "$loaded_history" ] && ! $is_no_color ; then
  selected_entry=$(edit_new_entry)
  is_new_entry=true
fi

if [ -n "$selected_entry" ] ; then
  1>&2 echo -e "Selected_entry:\n${selected_entry}"
fi

if $is_new_entry ; then
  echo "${selected_entry}" >>"$history_file"
fi

colorcat_imp() {
  local concated_cmd_bre=
  local concated_cmd_re=
  local current_color=
  local re_type=
  local re_expr=
  {
    while read -r line ; do
      if [[ "$line" =~ ^color:[[:blank:]]*([^[:space:]]+) ]] ; then
        current_color="${BASH_REMATCH[1]}"
        continue
      fi

      local color_code="${color_map[$current_color]}"
      if [ -z "$color_code" ] ; then
        1>&2 echo "Color not supported: $current_color, using white instead."
        color_code="${color_map[white]}"
      fi

      if [[ "$line" =~ ^(re|bre):[[:blank:]]?(.+) ]] ; then
        re_type="${BASH_REMATCH[1]}"
        re_expr="${BASH_REMATCH[2]}"
        local parenthesis1
        local parenthesis2
        parenthesis1="$([ "$re_type" = "re" ] && echo '(' || echo '\(')"
        parenthesis2="$([ "$re_type" = "re" ] && echo ')' || echo '\)')"
        local cmd="s/${parenthesis1}${re_expr}${parenthesis2}/${color_code}\1${color_reset_code}/g"
        if [ "$re_type" = "re" ] ; then
          if [ -n "$concated_cmd_re" ] ; then
            concated_cmd_re+=";${cmd}"
          else
            concated_cmd_re="${cmd}"
          fi
        elif [ "$re_type" = "bre" ] ; then
          if [ -n "$concated_cmd_bre" ] ; then
            concated_cmd_bre+=";${cmd}"
          else
            concated_cmd_bre="${cmd}"
          fi
        else
          1>&2 echo "Invalid re type, ignoring: $line"
          continue
        fi
      fi
    done
  } <<<"$1"

  if [ $is_verbose ] ; then
    1>&2 [ -n "$concated_cmd_re" ] && echo "real re: $concated_cmd_re"
    1>&2 [ -n "$concated_cmd_bre" ] && echo "real bre: $concated_cmd_bre"
  fi

  if [ -n "$concated_cmd_re" ] && [ -n "$concated_cmd_bre" ] ; then
    used_sed "$concated_cmd_bre" | used_sed -E "$concated_cmd_re"
  elif [ -n "$concated_cmd_re" ] ; then
    used_sed -E "$concated_cmd_re"
  elif [ -n "$concated_cmd_bre" ] ; then
    used_sed "$concated_cmd_bre"
  else
    cat
  fi
}

if $is_no_color ; then
  cat
else
  cat "${pass_args[@]}" | colorcat_imp "$selected_entry"
fi
