#!/usr/bin/env bash
set -e

history_file=.colorcat.hist
if [ -n "$SHELLKIT_HOME" ] ; then
  history_file="${SHELLKIT_HOME}/$history_file"
fi

declare -a pass_args_cat=()
declare -a pass_args_color=(\
  '--name' 'colorcat session' \
  '--session-file' "$history_file" \
  '--example-entry' "#Format:\n#color: <red|green|blue|black|yellow|magenta|cyan|white>\n#re: ^re1\n#re: ^re2\$" \
)

selected_entry=
is_cat_arg=true
while [ "$#" -gt 0 ] ; do
  key="$1"
  case $key in
      --selected-entry)
        selected_entry=$2 ; shift ; shift
        ;;
      --)
        is_cat_arg=false ; shift
        ;;
      *)
        if $is_cat_arg ; then
          pass_args_cat+=("$key")
        else
          pass_args_color+=("$key")
        fi
        shift
        ;;
  esac
done

color_map_black='[30m'
color_map_red='[31m'
color_map_green='[32m'
color_map_yellow='[33m'
color_map_blue='[34m'
color_map_magenta='[35m'
color_map_cyan='[36m'
color_map_white='[37m'
color_reset_code='[0m'

# 优先使用gsed
used_sed() {
  if type gsed >/dev/null 2>&1 ; then
    gsed "$@"
  else
    sed "$@"
  fi
}

if [ -z "$selected_entry" ] ; then
  selected_entry=$(lru_entry "${pass_args_color[@]}")
  # lru_entry返回2表示完成了编辑
  if [ "$?" -eq 2 ] ; then
    exit
  fi
fi

# 注意事项：
# back reference从2开始，因为为了添加颜色在输入的re外面已经添加一层()

# entry history文件格式
# 1. entry
# ============
# color: red|green
# re: xxx
# re: xxx
# color: blue
# re: yyy
# ------------
# 2. entry之间的分隔符
# 
# ============

colorcat_imp() {
  local concated_cmd_bre=
  local concated_cmd_re=
  local current_color=
  local re_type=
  local re_expr=
  {
    while read -r line ; do
      if [[ "$line" =~ ^color:[[:blank:]]*([^[:space:]]+) ]] ; then
        current_color="${BASH_REMATCH[1]}"
        continue
      fi

      if [[ "$line" =~ ^(re|bre):[[:blank:]]?(.+) ]] ; then
        local color_code="$(eval 'printf %s "$color_map_'"$current_color\"")"
        if [ -z "$color_code" ] ; then
          1>&2 echo "Color not supported: $current_color, using white instead."
          color_code="${color_map_white}"
        fi

        re_type="${BASH_REMATCH[1]}"
        re_expr="${BASH_REMATCH[2]}"
        local parenthesis1
        local parenthesis2
        parenthesis1="$([ "$re_type" = "re" ] && echo '(' || echo '\(')"
        parenthesis2="$([ "$re_type" = "re" ] && echo ')' || echo '\)')"
        local cmd="s/${parenthesis1}${re_expr}${parenthesis2}/${color_code}\1${color_reset_code}/g"
        if [ "$re_type" = "re" ] ; then
          if [ -n "$concated_cmd_re" ] ; then
            concated_cmd_re+=";${cmd}"
          else
            concated_cmd_re="${cmd}"
          fi
        elif [ "$re_type" = "bre" ] ; then
          if [ -n "$concated_cmd_bre" ] ; then
            concated_cmd_bre+=";${cmd}"
          else
            concated_cmd_bre="${cmd}"
          fi
        else
          1>&2 echo "Invalid re type, ignoring: $line"
          continue
        fi
      fi
    done
  } <<<"$1"

  1>&2 [ -n "$concated_cmd_re" ] && echo "real re: $concated_cmd_re"
  1>&2 [ -n "$concated_cmd_bre" ] && echo "real bre: $concated_cmd_bre"

  if [ -n "$concated_cmd_re" ] && [ -n "$concated_cmd_bre" ] ; then
    cat "${pass_args_cat[@]}" | used_sed "$concated_cmd_bre" | used_sed -E "$concated_cmd_re"
  elif [ -n "$concated_cmd_re" ] ; then
    cat "${pass_args_cat[@]}" | used_sed -E "$concated_cmd_re"
  elif [ -n "$concated_cmd_bre" ] ; then
    cat "${pass_args_cat[@]}" | used_sed "$concated_cmd_bre"
  else
    cat "${pass_args_cat[@]}"
  fi
}

if [[ "$selected_entry" =~ ^[[:space:]]*$ ]] ; then
  cat "${pass_args_cat[@]}"
else
  colorcat_imp "$selected_entry"
fi
