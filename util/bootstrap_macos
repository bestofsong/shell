#!/usr/bin/env bash
set -eu

print_help() {
  local opts='[--tool] [--ios] [--ruby] [--backend] [--android] [-h|--help]'
  printf 'Usage: %s %s\n  %s\n' \
    "$0" "${opts}" "essential softwares(like vim, bash, docker, etc..) are always installed"
}

has_android=false
has_backend=false
has_ruby=false
has_ios=false
has_tool=false
while [ "$#" -gt 0 ] ; do
  case "$1" in
    --tool)
      has_tool=true
      shift
      ;;
    --ios)
      has_ios=true
      shift
      ;;
    --ruby)
      has_ruby=true
      shift
      ;;
    --backend)
      has_backend=true
      shift
      ;;
    --android)
      has_android=true
      shift
      ;;
    -h|--help)
      print_help
      exit
      ;;
    *)
      shift
      ;;
  esac
done


has_brew() {
  set -o pipefail
  local ret=
  if brew info --json "$1" 2>/dev/null |\
    jq -e "any(.name == \"$1\" and isempty(.installed) == false)" >/dev/null ; then
    ret=0
  else
    ret=1
  fi
  set +o pipefail
  return $ret
}


brew_install() {
  if has_brew "$1" ; then
    echo "Skip brew install for already installed: $1"
  else
    echo "Brew installing: $1"
    brew install "$1"
  fi
}

has_brew_cask() {
  set -o pipefail
  local ret=
  if brew list --cask -1 |\
    grep -E "^[[:blank:]]*${1}[[:blank:]]*$" >/dev/null 2>&1 ; then
    ret=0
  else
    ret=1
  fi
  set +o pipefail
  return $ret
}

brew_cask_install() {
  if has_brew_cask "$1" ; then
    echo "Skip brew cask install for already installed: $1"
  else
    echo "Brew cask installing: $1"
    brew cask install "$1"
  fi
}

try_load_nvm() {
  local NVM_DIR=
  NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
}

npm_install() {
  type -p "$1" >/dev/null 2>&1 &&\
    return 0
  npm install -g "$@"
}

install_essentials() {
  # 基本工具
  # brew
  type -p brew >/dev/null 2>&1 ||\
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  brew_install vim
  brew_install tree
  brew_install bash
  brew_install xmlstarlet
  brew_install ripgrep
  brew_install fzf
  brew_install blueutil
  has_brew ctags || brew install --HEAD universal-ctags/universal-ctags/universal-ctags
  # bash-completion
  if ! has_brew bash-completion ; then
    brew install bash-completion && \
      echo '[[ -r /usr/local/etc/profile.d/bash_completion.sh ]] && . /usr/local/etc/profile.d/bash_completion.sh' \
      >> ~/.bash_profile
  fi
  # vim-plug
  local vim_plug_dir=${HOME}/.vim/autoload/plug.vim
  [ -s "$vim_plug_dir" ] || curl -fLo "$vim_plug_dir" \
    --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  brew_cask_install docker
  if ! docker container ls -a | grep plantuml >/dev/null 2>&1 ; then
    docker run -d -p:8100:8080 --name plantuml --restart always plantuml/plantuml-server:jetty
  fi
  #brew_cask_install iterm2
  #brew_cask_install postman
  #brew_cask_install shadowsocksx-ng-r
  #brew_cask_install dropbox
  #brew_cask_install charles
  #brew_cask_install google-chrome

  ## node
  if ! try_load_nvm ; then
    type nvm >/dev/null 2>&1 ||\
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
          try_load_nvm
  fi
  nvm install --lts
  npm_install yarn
  npm_install npx
  npm_install typescript
  npm_install trymodule

  # python开发环境
  vpy3() {
    local python_exe=python3
    if [ ! -d "$HOME/.virtualenv" ] ;then
      mkdir "$HOME/.virtualenv"
    fi
    if [ ! -d "$HOME/.virtualenv/$python_exe" ] ;then
      virtualenv -p $python_exe "$HOME/.virtualenv/$python_exe"
    fi
    source "$HOME/.virtualenv/$python_exe/bin/activate"
  }
  type -p virtualenv >/dev/null 2>&1 || pip install virtualenv
  vpy3
  pip install -r <(
  echo 'setuptools'
  echo '# twine可以用来发布python package到pypi'
  echo 'twine'
  echo '# 最新版本pylint的和py3.6或一些第三方库不兼容'
  echo 'pylint == 1.6.0'
  )
  deactivate
}

install_tool() {
  if ! $has_tool ; then
    return
  fi
  # 二维码
  brew install qrencode libdmtx  dmtx-utils zbar
}

install_for_ruby() {
  if ! $has_ruby ; then
    return
  fi
  # ruby环境
  git clone https://github.com/andorchen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror || true
  brew install rbenv ruby-build
  . ~/.bash_profile
  rbenv install 2.4.2
  . ~/.bash_profile
  rbenv global 2.4.2
  gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/
  gem install bundler
  bundle config mirror.http://rubygems.org https://gems.ruby-china.com
}

install_for_backend() {
  if ! $has_backend ; then
    return
  fi
  ## Xcode: Mac Store
  brew install kubernetes-cli
  brew install psequel
  brew install travis
# 其他可选镜像
# minimum2scp/squid
}

install_for_ios() {
  if ! $has_ios ; then
    return
  fi
  # iOS 环境
  brew install ios-webkit-debug-proxy
  gem install xcpretty
  git clone 'https://github.com/XVimProject/XVim2' && cd XVim2 && make
  # grubbox主题
  # https://github.com/morhetz/gruvbox-contrib/tree/master/xcode
}

# 自己先保证brew的本地仓库足够新，然后使用下面的环境变量加快安装速度
# export HOMEBREW_NO_AUTO_UPDATE=1
# TODO: wansong, unnecessary sourcing of profile
install_for_android() {
  # android
  if ! $has_android ; then
    return
  fi
  brew cask install android-studio
  brew install ant
  brew install maven
  brew install gradle
  brew tap AdoptOpenJDK/openjdk
  brew cask install adoptopenjdk8
  . ~/.bash_profile

  brew cask install android-sdk || exit 0
  brew cask install android-ndk || exit 0

# if you dont already have the following code in your bashrc file, uncomment them then
#cat >>~/.bash_profile <<"EOF"
#REQUESTED_JAVA_VERSION='1.8'
#if POSSIBLE_JAVA_HOME="$(/usr/libexec/java_home -v $REQUESTED_JAVA_VERSION 2>/dev/null)"; then
#  # Do this if you want to export JAVA_HOME
#  export JAVA_HOME="$POSSIBLE_JAVA_HOME"
#  export PATH="${JAVA_HOME}/bin:${PATH}"
#fi
#
#export ANDROID_SDK_ROOT="/usr/local/share/android-sdk"
#export ANDROID_NDK_HOME="/usr/local/share/android-ndk"
#if [ -d "${ANDROID_SDK_ROOT}" ] ; then
#  export ANDROID_HOME="$ANDROID_SDK_ROOT"
#  export PATH=$PATH:${ANDROID_SDK_ROOT}/emulator
#  export PATH=$PATH:${ANDROID_SDK_ROOT}/tools
#  export PATH=$PATH:${ANDROID_SDK_ROOT}/tools/bin
#  export PATH=$PATH:${ANDROID_SDK_ROOT}/platform-tools
#else
#  unset ANDROID_SDK_ROOT
#fi
#EOF

# 再安装其他package
  caffeinate sdkmanager "add-ons;addon-google_apis-google-24" "platforms;android-29" "system-images;android-29;google_apis;x86_64" "system-images;android-29;default;x86_64" "sources;android-29" "build-tools;29.0.2"
}

echo "Starting to bootstrap your mac"
echo "Date: $(date '+%Y-%m-%dT%H:%M:%S%z')"
echo "First install jq which is needed for all kinds of tricks"
brew install jq || exit 1

install_essentials
install_tool
install_for_ruby
install_for_backend
install_for_ios
install_for_android
