#!/usr/bin/env bash
set -eu
shopt -s extglob

which_remote=origin
is_list=false
is_no_merge=false
is_quiet=false
declare -a my_names=()
declare -a forward_args=()
declare -a excepts=()
while [ "$#" -gt 0 ] ; do
  key="$1"
  case $key in
      --remote)
        which_remote="$2"
        shift ; shift
        ;;
      --except)
        excepts+=("$2")
        shift ; shift
        ;;
      --list|-l)
        is_list=true
        shift
        ;;
      --quiet|-q)
        is_quiet=true
        shift
        ;;
      --no-merge?(d))
        is_no_merge=true
        shift
        ;;
      --name|-n)
        if [ "$#" -gt 1 ] ; then
          my_names+=($(printf %s "$2" | tr ',' ' '))
        else
          echo "invalid arguments"
          exit 1
        fi
        shift ; shift
        ;;
      *)
      forward_args+=("$1")
      shift
      ;;
  esac
done


# locate git_dir
git_dir_root=$(pwd)
while ! [ -e "${git_dir_root}/.git" ] && [ "$git_dir_root" != / ] ; do
  git_dir_root="$(dirname "$git_dir_root")"
done
git_dir="${git_dir_root}/.git"
if ! [ -e "$git_dir" ] ; then
  echo "Found no git repositary."
  exit 1
fi

# 至少包含gitconfig里的名字
my_names+=("$(git config --get user.name)")

filter_except_refs() {
  if [ $# -eq 0 ] ; then
    cat
  fi
  IFS='|' local pattern="$*"
  unset IFS
  grep -v -E "$pattern"
}

# get all branches
declare -a branches=()
get_refs() {
  local sep=$'\x1e'
  if [ "${#my_names[@]}" -lt 1 ] ; then
    return
  fi
  local name_pattern=
  for name in "${my_names[@]}" ; do
    if [ -z "$name_pattern" ] ; then
      name_pattern="${sep}${name}${sep}"
    else
      name_pattern+="|${sep}${name}${sep}"
    fi
  done
  git for-each-ref --format="%(refname)${sep}%(authorname)${sep}%(committername)${sep}" \
    refs/heads refs/tags "refs/remotes/$which_remote" | \
    grep -E "$name_pattern" | \
    filter_except_refs "${excepts[@]:+${excepts[@]}}" | \
    awk -F "$sep" '{print $1}'
}
IFS=$'\n'
branches+=($(get_refs))
unset IFS

# filter branches
declare -a my_branches=()
for bb in "${branches[@]:+${branches[@]}}"; do
  if $is_no_merge && ! [[ "$(git log -1 head.."$bb")" =~ [[:space:]]+ ]] ; then
    continue
  fi
  my_branches+=("$bb")
done

if $is_list ; then
  if [ "${#my_branches[@]}" -eq 0 ] ; then
    exit 0
  fi
  mention_no_merge=
  if $is_no_merge ; then
    mention_no_merge+="(that is not merged to head)"
  fi
  IFS=$'\n'
  if $is_quiet ; then
    printf "${my_branches[*]}\n"
  else
    printf "branches touched by me%s:\n${my_branches[*]}\n" "${mention_no_merge}"
  fi
  unset IFS
  exit
fi

if [ "${#my_branches[@]}" -lt 1 ] ; then
  echo "match no branch"
  exit 0
fi

git log --graph --oneline --decorate \
  --color --abbrev-commit \
  --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' \
  --date=format-local:'%Y-%m-%d %z %a' \
  "${forward_args[@]:+"${forward_args[@]}"}" \
  "${my_branches[@]}"

